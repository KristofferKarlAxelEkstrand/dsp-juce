name: CI Build

on:
  pull_request:
    branches: [ main, develop ]

env:
  BUILD_TYPE: Release

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run markdown linting
      run: npm test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v5

    - name: Set build environment variables
      run: |
        case "$RUNNER_OS" in
          "Windows")
            # On Windows, always use vs2022 preset regardless of build type
            echo "CMAKE_PRESET=vs2022" >> $GITHUB_ENV
            # Use forward slashes consistently for cross-platform compatibility
            BUILD_PATH="${{github.workspace}}/build/vs2022"
            echo "BUILD_DIR=${BUILD_PATH}" >> $GITHUB_ENV
            ;;
          *)
            # On non-Windows platforms, use preset based on build type
            case "${{matrix.build_type}}" in
              "Release")
                echo "CMAKE_PRESET=release" >> $GITHUB_ENV
                echo "BUILD_DIR=${{github.workspace}}/build/release" >> $GITHUB_ENV
                ;;
              *)
                echo "CMAKE_PRESET=default" >> $GITHUB_ENV
                echo "BUILD_DIR=${{github.workspace}}/build" >> $GITHUB_ENV
                ;;
            esac
            ;;
        esac
      shell: bash

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxrandr-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libgl1-mesa-dev \
          libxext-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.1-dev \
          pkg-config \
          build-essential

    - name: Cache JUCE
      uses: actions/cache@v4
      id: cache-juce
      with:
        path: ${{ github.workspace }}/.juce_cache
        key: ${{ runner.os }}-juce-${{ hashFiles('**/CMakeLists.txt') }}
        restore-keys: |
          ${{ runner.os }}-juce-

    - name: Configure CMake
      run: cmake --preset=${{ env.CMAKE_PRESET }} -DFETCHCONTENT_BASE_DIR=${{ github.workspace }}/.juce_cache
      shell: bash

    - name: Build
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          # For Windows, use the preset-defined build directory directly
          cmake --build build/vs2022 --config ${{matrix.build_type}}
        else
          cmake --build ${{ env.BUILD_DIR }} --config ${{matrix.build_type}}
        fi
      shell: bash

    - name: Test (Linux/macOS)
      if: runner.os != 'Windows'
      working-directory: ${{ env.BUILD_DIR }}
      run: |
        # Determine binary path based on platform
        if [ "$RUNNER_OS" == "macOS" ]; then
          BINARY_PATH="DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.app"
          BINARY_TYPE="macOS app bundle"
          TEST_CMD="[ -d"
        else
          BINARY_PATH="DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin"
          BINARY_TYPE="Linux binary"
          TEST_CMD="[ -f"
        fi
        
        # Check if binary exists
        if eval "$TEST_CMD \"$BINARY_PATH\" ]"; then
          echo "✅ Build successful - $BINARY_TYPE created"
        else
          echo "❌ Build failed - $BINARY_TYPE not found"
          ls -la "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/"
          exit 1
        fi

    - name: Test (Windows)
      if: runner.os == 'Windows'
      working-directory: build/vs2022
      run: |
        # For now, just verify the binary was created
        if (Test-Path "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.exe") {
          Write-Host "✅ Build successful - binary created"
        } else {
          Write-Host "❌ Build failed - binary not found"
          Get-ChildItem "DSPJucePlugin_artefacts/${{matrix.build_type}}/"
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release'
      with:
        name: DSPJucePlugin-${{ matrix.os }}
        path: |
          build/vs2022/DSPJucePlugin_artefacts/Release/
          ${{ env.BUILD_DIR }}/DSPJucePlugin_artefacts/Release/
        retention-days: 30