name: CI Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  lint:
    name: Lint Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Node.js
      uses: actions/setup-node@v5
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm install
    
    - name: Run markdown linting
      run: npm test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]

    steps:
    - uses: actions/checkout@v5

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          libx11-dev \
          libxcomposite-dev \
          libxcursor-dev \
          libxinerama-dev \
          libxrandr-dev \
          libfreetype6-dev \
          libfontconfig1-dev \
          libgl1-mesa-dev \
          libxext-dev \
          libcurl4-openssl-dev \
          libwebkit2gtk-4.1-dev \
          pkg-config \
          build-essential

    - name: Configure CMake
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --preset=vs2022
        elif [ "${{matrix.build_type}}" == "Release" ]; then
          cmake --preset=release
        else
          cmake --preset=default
        fi
      shell: bash

    - name: Build
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          cmake --build build/vs2022 --config ${{matrix.build_type}}
        elif [ "${{matrix.build_type}}" == "Release" ]; then
          cmake --build build/release --config Release
        else
          cmake --build build --config Debug
        fi
      shell: bash

    - name: Test (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        # Determine working directory based on build type
        if [ "${{matrix.build_type}}" == "Release" ]; then
          BUILD_DIR="${{github.workspace}}/build/release"
        else
          BUILD_DIR="${{github.workspace}}/build"
        fi
        
        cd "$BUILD_DIR"
        
        # Check standalone binary path (differs between Linux and macOS)
        if [ "$RUNNER_OS" == "macOS" ]; then
          # macOS creates app bundle
          if [ -d "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.app" ]; then
            echo "✅ Build successful - macOS app bundle created"
          else
            echo "❌ Build failed - macOS app bundle not found"
            ls -la DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/
            exit 1
          fi
        else
          # Linux creates executable
          if [ -f "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin" ]; then
            echo "✅ Build successful - Linux binary created"
          else
            echo "❌ Build failed - Linux binary not found"
            ls -la DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/
            exit 1
          fi
        fi

    - name: Test (Windows)
      if: runner.os == 'Windows'
      working-directory: ${{github.workspace}}/build/vs2022
      run: |
        # For now, just verify the binary was created
        if (Test-Path "DSPJucePlugin_artefacts/${{matrix.build_type}}/Standalone/DSP-JUCE Plugin.exe") {
          Write-Host "✅ Build successful - binary created"
        } else {
          Write-Host "❌ Build failed - binary not found"
          Get-ChildItem DSPJucePlugin_artefacts/${{matrix.build_type}}/
          exit 1
        }

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release'
      with:
        name: DSPJucePlugin-${{ matrix.os }}
        path: |
          ${{github.workspace}}/build/DSPJucePlugin_artefacts/Release/
          ${{github.workspace}}/build/release/DSPJucePlugin_artefacts/Release/
          ${{github.workspace}}/build/vs2022/DSPJucePlugin_artefacts/Release/
        retention-days: 30